<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Lang;
use Illuminate\Support\Facades\Crypt;
use Illuminate\Support\Facades\Password;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Str;
use App\Models\User;
use App\Models\User_Sessions;
use App\Models\TwoFALogs;
use Illuminate\Support\Carbon;


class UserController extends Controller
{
    //Check user login details
    public function login(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'username' => 'required',
            'password' => 'required',
        ]);
        if ($validator->fails()) {
            return error($validator->errors());
        }
        $find_data = getuserbyUsernameEmail($request->username);
        if (empty($find_data)) {
            return error(Lang::get('validation.custom.wrong_username'));
        }
        if ($find_data->status == 0) {
            return error(Lang::get('validation.custom.account_deleted'));
        }
        if ($find_data->status == 2) {
            return error(Lang::get('validation.custom.account_inactive'));
        }
        if (Hash::check($request->password, $find_data->password)) {
            $current_time = currenthumantime();
            if ($find_data->email_verified_at == '') {
                return error(Lang::get('validation.custom.email_unverified'));
            }
            if ($request->has('twofacode')) {
                //Validate 2FAcode and allow login
                $last_twofa = TwoFALogs::where('user_id', $find_data->id)->orderBy('email_sent_time', 'desc')->first();
                if (!empty($last_twofa)) {
                    $to = Carbon::createFromFormat('Y-m-d H:s:i', $last_twofa->email_sent_time);
                    $from = Carbon::createFromFormat('Y-m-d H:s:i', $current_time);
                    $diff_in_minutes = $to->diffInMinutes($from);
                    // if ($diff_in_minutes > 20) {
                    //     return error(Lang::get('validation.custom.twofa_expired_code'));
                    // } else {
                    if ($request->twofacode == $last_twofa->twofa_code) {
                        TwoFALogs::where('id', $last_twofa->id)->update(['twofa_verified' => 1, 'twofa_verified_time' => $current_time]);
                        $apiToken = Crypt::encrypt($find_data->id);
                        User::where('id', $find_data->id)->update(['authtoken' => $apiToken, 'is_loggedin' => 1]);
                        $find_data->authtoken = $apiToken;
                        Auth::login($find_data);
                        User_Sessions::where('user_id', $find_data->id)->where('logout_time', NULL)->update(['logout_time' => $current_time, 'ipaddress' => getIP()]);
                        User_Sessions::create(['user_id' => $find_data->id, 'login_time' => $current_time, 'ipaddress' => getIP()]);

                        addlog('Login', 'User', Lang::get('validation.logs.user_login', ['username' => $find_data->username]), $find_data->id);
                        return success($find_data, Lang::get('validation.custom.login_success'));
                    } else {
                        return error(Lang::get('validation.custom.twofa_invalid_code'));
                    }
                    // }
                }
            } else {
                //Send 2FA email
                $facode = random_int(100000, 999999);
                Mail::send('emails.Send2FACode', ['facode' => $facode, 'data' => $find_data], function ($message) use ($find_data) {
                    $message->to($find_data->email);
                    $message->subject(env('APP_NAME') . ' - Two Factor Verification Code');
                });
                if (Mail::failures()) {
                    $add_data = TwoFALogs::create(['user_id' => $find_data->id, 'twofa_code' => $facode, 'email_sent' => 0]);
                    $delete_oldcodes = TwoFALogs::where('id', '!=', $add_data->id)->where('user_id', $find_data->id)->delete();
                    addlog('Login', 'User', Lang::get('validation.logs.twofa_mail_failed', ['email' => $find_data->email]), $find_data->id);
                    return error(Lang::get('validation.custom.twofamail_failed'));
                } else {
                    addlog('Login', 'User', Lang::get('validation.logs.twofa_mail_success', ['email' => $find_data->email]), $find_data->id);
                    $add_data = TwoFALogs::create(['user_id' => $find_data->id, 'twofa_code' => $facode, 'email_sent' => 1, 'email_sent_time' => $current_time]);
                    $delete_oldcodes = TwoFALogs::where('id', '!=', $add_data->id)->where('user_id', $find_data->id)->delete();
                    return success($find_data, Lang::get('validation.custom.twofamail_sent'));
                }
                //Temp-to remove 2fa mail and show code in message
                // $facode = random_int(100000, 999999);
                // addlog('Login', 'User', Lang::get('validation.logs.twofa_mail_success', ['email' => $find_data->email]), $find_data->id);
                // TwoFALogs::create(['user_id' => $find_data->id, 'twofa_code' => $facode, 'email_sent' => 1, 'email_sent_time' => $current_time]);
                // return success($find_data, Lang::get('validation.custom.twofamail_sent').'-2facode-'.$facode);
            }
        } else {
            return error(Lang::get('validation.custom.wrong_password'));
        }
    }

    //Send password reset email - forgot-password 
    public function forgotpass(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'username' => 'required',
        ]);
        if ($validator->fails()) {
            return error($validator->errors());
        }
        $current_user = getuserbyUsernameEmail($request->username);
        if (!empty($current_user)) {
            $current_time = currenthumantime();
            $token = Str::random(64);
            DB::table('password_resets')->insert(
                ['email' => $current_user->email, 'token' => $token, 'created_at' => $current_time]
            );
            Mail::send('emails.ForgotPassword', ['token' => $token, 'data' => $current_user], function ($message) use ($current_user) {
                $message->to($current_user->email);
                $message->subject(env('APP_NAME') . ' - Reset Password Notification');
            });
            if (Mail::failures()) {
                return error(Lang::get('validation.custom.reset_email_failed'));
            } else {
                addlog('Password Reset', 'User', Lang::get('validation.logs.password_reset_mail', ['email' => $current_user->email]), $current_user->id);
                return success($current_user, Lang::get('validation.custom.reset_email_sent'));
            }
        } else {
            return error(Lang::get('validation.custom.wrong_username'));
        }
    }

    // Reset password with new password and token
    public function resetpassword(Request $request)
    {
        $mismatchpassword = Lang::get('validation.custom.mismatch_password');
        $messages = [
            'password.confirmed' => $mismatchpassword,
        ];
        $validator = Validator::make($request->all(), [
            'password' => 'required|string|confirmed|min:8',
            'password_confirmation' => 'required',
            'token' => 'required',
        ], $messages);
        if ($validator->fails()) {
            $errors = $validator->errors()->toArray();
            foreach ($errors as $fieldname => $message) {
                if ($fieldname == 'password' && in_array($mismatchpassword, $message))
                    $errors['password_confirmation'] = [$mismatchpassword];
            }
            unset($errors['password']);
            return error($errors);
            // return error($validator->errors());
        }
        $get_token = DB::table('password_resets')
            ->where('token', $request->token)
            ->first();
        if (!empty($get_token)) {
            $current_time = currenthumantime();
            $to = Carbon::createFromFormat('Y-m-d H:s:i', $get_token->created_at);
            $from = Carbon::createFromFormat('Y-m-d H:s:i', $current_time);
            $diff_in_minutes = $to->diffInMinutes($from);
            if ($diff_in_minutes > 20) {
                return error(Lang::get('validation.custom.expired_reset_token'));
            } else {
                $user = User::where('email', $get_token->email)
                    ->update(['password' => Hash::make($request->password)]);
                $current_user = getuserbyUsernameEmail($get_token->email);
                addlog('Password Reset', 'User', Lang::get('validation.logs.password_reset_success', ['email' => $current_user->email]), $current_user->id);
                return success($user, Lang::get('validation.custom.resetpassword_success'));
            }
        } else {
            return error(Lang::get('validation.custom.invalid_token'));
        }
    }

    // Logout user with token
    public function logout(Request $request)
    {
        $current_user = User::where('authtoken', $request->authtoken)->first();
        if (!empty($current_user)) {
            $current_time = currenthumantime();
            User::where('id', $current_user->id)->update(['is_loggedin' => 0, 'authtoken' => NULL]);

            User_Sessions::where('user_id', $current_user->id)->where('logout_time', NULL)->update(['logout_time' => $current_time, 'ipaddress' => getIP()]);
            addlog('Logout', 'User', Lang::get('validation.logs.user_logout', ['username' => $current_user->username]), $current_user->id);
            return success([], Lang::get('validation.custom.logout_success'));
        } else {
            return error(Lang::get('validation.custom.invalid_authtoken'));
        }
    }

    // View user details by ID
    public function viewuser(Request $request, $userid)
    {
        $finduser = User::find($userid);
        if (!empty($finduser)) {
            return success($finduser);
        } else {
            return error(Lang::get('validation.custom.invalid_userid'));
        }
    }

    // View current logged-in user details
    public function currentuser(Request $request)
    {
        $check_user = $request->get('current_user');
        return success($check_user);
    }

    // Get all users-Active & Inactive
    public function allusers(Request $request)
    {
        $check_user = $request->get('current_user');
        $getdata = User::query();
        if ($request->has('status'))
            $getdata = $getdata->where('status', $request->status)->where('id', '!=', $check_user->id);
        else
            $getdata = $getdata->where('status', '!=', 0)->where('id', '!=', $check_user->id);
        if ($request->has('role') && $request->role != '')
            $getdata = $getdata->where('role', $request->role);
        $all_data = $getdata->get();
        if ($all_data) {
            $all_data->makeHidden(['authtoken']);
            return success($all_data, '');
        } else {
            return error();
        }
    }

    // Get users by role-Admin & Standard User
    public function usersbyrole(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'role' => 'required|integer',
        ]);
        if ($validator->fails()) {
            return error($validator->errors());
        }
        $all_users = User::where('role', $request->role)->get();
        return ($all_users) ? success($all_users, '') : error();
    }

    // Add new user
    public function adduser(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'firstname' => 'required|string|max:255',
            'lastname' => 'required|string|max:255',
            'username' => 'required|max:255|unique:users',
            'email' => 'required|email|max:255|unique:users',
            'role' => 'required|integer',
        ]);
        if ($validator->fails()) {
            return error($validator->errors());
        }
        $check_user = $request->get('current_user');

        $user_details = $request;
        $user_details['status'] = 2;
        // $user_details['password'] = Hash::make($request->password);
        $user_details['authtoken'] = NULL;
        $user_details['created_by'] = $check_user->id;
        $user_details = $user_details->toArray();
        $adduser = User::create($user_details);
        if ($adduser) {
            $added_user = getuserbyUsernameEmail($request->email);
            $token = Crypt::encrypt($added_user->email);
            Mail::send('emails.VerifyEmail', ['token' => $token, 'data' => $added_user], function ($message) use ($added_user) {
                $message->to($added_user->email);
                $message->subject(env('APP_NAME') . ' - Verify your email');
            });
            if (Mail::failures()) {
                addlog('Add', 'User', Lang::get('validation.logs.verifyemail_failed', ['email' => $added_user->email]), $check_user->id);
                return error(Lang::get('validation.custom.verify_email_failed'));
            } else {
                addlog('Add', 'User', Lang::get('validation.logs.useradd_success', ['email' => $request->email, 'username' => $check_user->username]), $check_user->id);
                return success([], Lang::get('validation.custom.user_add_success'));
            }
        } else {
            addlog('Add', 'User', Lang::get('validation.logs.user_add_failed', ['email' => $request->email, 'username' => $check_user->username]), $check_user->id);
            return error(Lang::get('validation.custom.useradd_failed'));
        }
    }

    // Verify email and activate account
    public function verifyemail(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'token' => 'required',
        ]);
        if ($validator->fails()) {
            return error($validator->errors());
        }
        $usermail = Crypt::decrypt($request->token);
        if (filter_var($usermail, FILTER_VALIDATE_EMAIL)) {
            $current_time = currenthumantime();
            $verfiy_user = User::where('email', $usermail)->where('status', 2)->update(['email_verified_at' => $current_time, 'status' => 1]);
            if ($verfiy_user) {
                $cur_user = User::where('email', $usermail)->get();
                return success($cur_user, Lang::get('validation.custom.verify_account_success'));
            } else {
                return error(Lang::get('validation.custom.verify_account_failed'));
            }
        } else {
            return error(Lang::get('validation.custom.invalid_email'));
        }
    }


    // Set email after email verified
    public function setuserpassword(Request $request)
    {
        $mismatchpassword = Lang::get('validation.custom.mismatch_password');
        $validator = Validator::make($request->all(), [
            'userid' => 'required|numeric',
            'password' => 'required|string|min:8',
            // 'password' => 'required|string|confirmed|min:8',
            'password_confirmation' => 'required',
        ]);
        if ($validator->fails()) {
            // $errors = $validator->errors()->toArray();
            // $remove_password = 0;
            // foreach ($errors as $fieldname => $message) {
            //     if ($fieldname == 'password' && in_array($mismatchpassword, $message)) {
            //         if (sizeof($message) == 1) {
            //             $errors['password_confirmation'] = [$mismatchpassword];
            //             $remove_password = 1;
            //         } else {
            //             if (($key = array_search($mismatchpassword, $message)) !== false) {
            //                 unset($message[$key]);
            //             }
            //             $errors['password_confirmation'] = $message;
            //         }
            //     }
            // }
            // if ($remove_password == 1)
            //     unset($errors['password']);
            // return error($errors);
            return error($validator->errors());
        }
        $cur_user = User::find($request->userid);
        if (!empty($cur_user)) {
            $newpassword = Hash::make($request->password);
            if (Hash::make($request->password) != $cur_user->password) {
                return error(array('password_confirmation' => array($mismatchpassword)));
            }
            $update_data = User::where('id', $request->userid)->update(['status' => 1, 'password' => $newpassword]);
            if ($update_data) {
                return success([], Lang::get('validation.custom.passwordset_success'));
            } else {
                return error(Lang::get('validation.custom.passwordset_failed'));
            }
        } else {
            return error(Lang::get('validation.custom.invalid_userid'));
        }
    }

    // update user details
    public function updateuser(Request $request, $userid)
    {
        $validate_fields = array(
            'firstname' => 'required|string|max:255',
            'lastname' => 'required|string|max:255',
            'email' => 'required|email|max:255|unique:users,email,' . $userid . '',
        );
        $check_user = $request->get('current_user');
        if ($check_user->role == 1) {
            $validate_fields['role'] = 'required|integer';
            $validate_fields['status'] = 'required|integer';
        }
        if ($request->has('password') && trim($request->password) != '') {
            $validate_fields['password'] = 'sometimes|required|string|min:8';
        }
        $validator = Validator::make($request->all(), $validate_fields);
        if ($validator->fails()) {
            return error($validator->errors());
        }
        if (($check_user->role != 1) && ($check_user->id != $userid)) {
            return error(Lang::get('validation.custom.unauthorized_access'));
        }
        $update_array = array(
            'firstname' => $request->firstname,
            'lastname' => $request->lastname,
            'email' => $request->email,
        );
        if ($request->has('password'))
            $update_array['password'] = Hash::make($request->password);
        if ($check_user->role == 1) {
            $update_array['role'] = $request->role;
            $update_array['status'] = $request->status;
        }
        $update_user = User::where('id', $userid)->update($update_array);
        if ($update_user) {
            addlog('Update', 'User', Lang::get('validation.logs.userupdate_success', ['email' => $request->email, 'username' => $check_user->username]), $check_user->id);
            $find_data = User::find($userid);
            return success($find_data, Lang::get('validation.custom.user_update_success'));
        } else {
            addlog('Update', 'User', Lang::get('validation.logs.userupdate_failed', ['email' => $request->email, 'username' => $check_user->username]), $check_user->id);
            return error(Lang::get('validation.custom.user_update_failed'));
        }
    }

    // Delete user- Change user status to 0
    public function deleteuser(Request $request, $userid)
    {
        $check_user = $request->get('current_user');
        $delete_user = User::find($userid);
        if (!empty($delete_user)) {
            $update_data = User::where('id', $userid)->update(['status' => 0, 'authtoken' => NULL, 'is_loggedin' => 0]);
            if ($update_data) {
                addlog('Delete', 'User', Lang::get('validation.logs.userdelete_success', ['email' => $delete_user->email, 'username' => $check_user->username]), $check_user->id);
                return success([], Lang::get('validation.custom.user_delete_success'));
            } else {
                addlog('Delete', 'User', Lang::get('validation.logs.userdelete_failed', ['email' => $delete_user->email]), $check_user->id);
                return error(Lang::get('validation.custom.user_delete_success'));
            }
        } else {
            return error(Lang::get('validation.custom.invalid_userid'));
        }
    }

    //Resend email verification link
    public function resendverifyemail(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'userid' => 'required|numeric',
        ]);
        if ($validator->fails()) {
            return error($validator->errors());
        }
        $find_data = User::find($request->userid);
        if (!empty($find_data)) {
            if ($find_data->email_verified_at != '') {
                return error(Lang::get('validation.custom.email_already_verified'));
            } else {
                $token = Crypt::encrypt($find_data->email);
                $check_user = $request->get('current_user');
                Mail::send('emails.VerifyEmail', ['token' => $token, 'data' => $find_data], function ($message) use ($find_data) {
                    $message->to($find_data->email);
                    $message->subject(env('APP_NAME') . ' - Verify your email');
                });
                if (Mail::failures()) {
                    addlog('Add', 'User', Lang::get('validation.logs.verifyemail_failed', ['email' => $find_data->email]), $check_user->id);
                    return error(Lang::get('validation.custom.verify_email_failed'));
                } else {
                    $find_data->updated_at = currenthumantime();
                    $find_data->save();
                    addlog('Add', 'User', Lang::get('validation.logs.verifyemail_success', ['email' => $find_data->email]), $check_user->id);
                    return success($find_data, Lang::get('validation.custom.verify_email_success'));
                }
            }
            // sleep(3);
            return success($find_data, Lang::get('validation.custom.verify_email_success'));
        } else {
            return error(Lang::get('validation.custom.invalid_userid'));
        }
    }

    //Restore User Account
    public function restoreuser(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'userid' => 'required|numeric',
        ]);
        if ($validator->fails()) {
            return error($validator->errors());
        }
        $find_data = User::find($request->userid);
        if (!empty($find_data)) {
            if ($find_data->status != 0) {
                return error(Lang::get('validation.custom.user_already_active'));
            } else {
                $check_user = $request->get('current_user');
                $find_data->status = 1;
                if ($find_data->save()) {
                    addlog('Restore', 'User', Lang::get('validation.logs.userrestore_success', ['email' => $find_data->email]), $check_user->id);
                    return success($find_data, Lang::get('validation.custom.user_restore_success'));
                } else {
                    addlog('Restore', 'User', Lang::get('validation.logs.userrestore_failed', ['email' => $find_data->email]), $check_user->id);
                    return error(Lang::get('validation.custom.user_restore_failed'));
                }
            }
        } else {
            return error(Lang::get('validation.custom.invalid_userid'));
        }
    }
}
